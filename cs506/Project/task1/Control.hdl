/*

Mux8Way represented in a table:

----------------------------------------------------------------
     |	j1  |	j2  |	j3  |	ng  |	zr    |	PC's load bit  |
----------------------------------------------------------------
null |	0   |	0   |	0   |	*   |	*     |		0      |
----------------------------------------------------------------
JGT  |	0   |	0   |	1   | !(ng) AND !(zr) |		       |
----------------------------------------------------------------
JEQ  |	0   |	1   |	0   |   *   |	zr    |  	       |
----------------------------------------------------------------
JGE  |	0   |	1   |	1   |  !(ng) OR zr    |	 	       |
----------------------------------------------------------------
JLT  |	1   |	0   |	0   |	ng  |	*     |		       |
----------------------------------------------------------------
JNE  |	1   |	0   |	1   |   *   | !(zr)   |		       |
----------------------------------------------------------------
JLE  |	1   |	1   |	0   |	ng OR zr      |		       |
----------------------------------------------------------------
JMP  |	1   |	1   |	1   |	*   |	*     |		1      |
----------------------------------------------------------------
*/

CHIP Control {

    IN in, zr, ng, jbits[3];
    OUT out;

    PARTS:

    // Checking jump bits and zr / ng to get load of PC
    Not (in=zr, out=notZr);
    Not (in=ng, out=notNg);
    And (a=notNg, b=notZr, out=notNgZr);	// JGT
    Or (a=notNg, b=zr, out=notNgOrZr);		// JGE
    Or (a=ng, b=zr, out=ngOrZr);		// JLE
    Mux8Way (a=false, b=notNgZr, c=zr, d=notNgOrZr, e=ng, f=notZr, g=ngOrZr, h=true, sel=jbits[0..2], out=checkJ);
    And (a=in, b=checkJ, out=out);
}