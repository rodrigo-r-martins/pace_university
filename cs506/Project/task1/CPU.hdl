// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/* Required: 16 gates or fewer */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Evaluating selector to mux between ALU output and instruction that is going to enter in ARegister
    Not (in=instruction[15], out=notInst15);
    Mux16 (a=outALU, b=instruction, sel=notInst15, out=outMuxA);

    // Evaluating load bit of ARegister, which loads output of previous mux and outputs address of RAM
    Or (a=notInst15, b=instruction[5], out=loadRegA);    
    ARegister (in=outMuxA, load=loadRegA, out=outRegA, out[0..14]=addressM);

    // Evaluating selector to mux between ARegister output and inM (output of RAM)
    And (a=instruction[15], b=instruction[12], out=selMuxA);
    Mux16 (a=outRegA, b=inM, sel=selMuxA, out=inY);	// Output becomes Y input of ALU

    // Evaluating load bit to DRegister, which loads ALU output
    And (a=instruction[4], b=instruction[15], out=loadRegD);
    DRegister (in=outALU, load=loadRegD, out=inX);	// Output becomes X input of ALU

    // Loading ALU
    ALU (x=inX, y=inY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zrIn, ng=ngIn);
    // ALU output becomes RAM input (outM)
    // zr and ng will be used to check jump bits (instruction[0..2]) and to load PC input

    // Gate that controls jump bits (instruction[0..2]) with zr and ng outputs of ALU, as shown in CPU architecture
    Control (in=instruction[15], zr=zrIn, ng=ngIn, jbits=instruction[0..2], out=loadPC);

    // Loading PC with load bit (jump bits) checked in Control gate
    PC (in=outRegA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    // Evaluating load bit of RAM
    And (a=instruction[15], b=instruction[3], out=writeM);
}
